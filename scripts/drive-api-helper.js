// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ Google Drive API
// –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ω—É–∂–µ–Ω API –∫–ª—é—á Google Drive

const FOLDER_ID = "1VzFAe9RXe3R9gqzlTCKBgHxSN2VGa_vS" // ID –≤–∞—à–µ–π –ø–∞–ø–∫–∏
const API_KEY = "–í–ê–®_API_–ö–õ–Æ–ß_GOOGLE_DRIVE" // –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ console.developers.google.com

async function getAllFilesFromFolder() {
  try {
    const response = await fetch(
      `https://www.googleapis.com/drive/v3/files?q='${FOLDER_ID}'+in+parents&key=${API_KEY}&fields=files(id,name,webViewLink)`,
    )

    const data = await response.json()

    if (data.files) {
      console.log("üìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")

      const filesList = data.files
        .filter((file) => file.name.endsWith(".mp3"))
        .sort((a, b) => a.name.localeCompare(b.name))
        .map((file) => {
          const surahNumber = file.name.match(/^(\d{3})/)?.[1]
          return {
            number: Number.parseInt(surahNumber),
            name: file.name,
            id: file.id,
            downloadUrl: `https://drive.google.com/uc?export=download&id=${file.id}`,
          }
        })

      console.table(filesList)

      // –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ surahsData.ts
      console.log("\nüìù –ö–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ surahsData.ts:")
      filesList.forEach((file) => {
        console.log(`// –°—É—Ä–∞ ${file.number}: ${file.name}`)
        console.log(`url: "https://drive.google.com/uc?export=download&id=${file.id}",`)
      })

      return filesList
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:", error)
  }
}

// –ó–∞–ø—É—Å–∫
getAllFilesFromFolder()
