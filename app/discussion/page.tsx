"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Send, MessageCircle, Heart, Reply } from "lucide-react"
import { useLanguage } from "@/hooks/useLanguage"

interface Discussion {
  id: number
  author: string
  message: string
  timestamp: string
  likes: number
  replies: ReplyType[]
}

interface ReplyType {
  id: number
  author: string
  message: string
  timestamp: string
}

export default function DiscussionPage() {
  const { t } = useLanguage()

  const [discussions, setDiscussions] = useState<Discussion[]>([
    {
      id: 1,
      author: "–ê—Ö–º–µ–¥",
      message:
        "–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º –±—Ä–∞—Ç—å—è –∏ —Å–µ—Å—Ç—Ä—ã! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –º–æ–∂–Ω–æ –ª–∏ —Å–ª—É—à–∞—Ç—å –ö–æ—Ä–∞–Ω –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã? –ù–µ –±—É–¥–µ—Ç –ª–∏ —ç—Ç–æ –Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ–º?",
      timestamp: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
      likes: 5,
      replies: [
        {
          id: 1,
          author: "–§–∞—Ç–∏–º–∞",
          message:
            "–í–∞ –∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª—è–º! –ö–æ–Ω–µ—á–Ω–æ –º–æ–∂–Ω–æ, —ç—Ç–æ –¥–∞–∂–µ –ø–æ–æ—â—Ä—è–µ—Ç—Å—è. –ö–æ—Ä–∞–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–∞—Ä–∞–∫–∞—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ.",
          timestamp: "1 —á–∞—Å –Ω–∞–∑–∞–¥",
        },
        {
          id: 2,
          author: "–Æ—Å—É—Ñ",
          message: "–°–æ–≥–ª–∞—Å–µ–Ω —Å —Å–µ—Å—Ç—Ä–æ–π –§–∞—Ç–∏–º–æ–π. –ì–ª–∞–≤–Ω–æ–µ - —Å–ª—É—à–∞—Ç—å —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º, –∫–æ–≥–¥–∞ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.",
          timestamp: "30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥",
        },
      ],
    },
    {
      id: 2,
      author: "–ú–∞—Ä—å—è–º",
      message: "–ö–∞–∫—É—é —Å—É—Ä—É –ª—É—á—à–µ —á–∏—Ç–∞—Ç—å –¥–ª—è —É—Å–ø–æ–∫–æ–µ–Ω–∏—è –¥—É—à–∏? –ü–µ—Ä–µ–∂–∏–≤–∞—é —Ç—Ä—É–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –∂–∏–∑–Ω–∏...",
      timestamp: "5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
      likes: 8,
      replies: [
        {
          id: 1,
          author: "–ê–±–¥—É–ª–ª–∞—Ö",
          message: "–°–µ—Å—Ç—Ä–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å—É—Ä—É –ê–ª—å-–§–∞—Ç–∏—Ö–∞ –∏ –ê—è—Ç –∞–ª—å-–ö—É—Ä—Å–∏. –¢–∞–∫–∂–µ —Å—É—Ä–∞ –ê—à-–®–∞—Ä—Ö –æ—á–µ–Ω—å —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç.",
          timestamp: "4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
        },
      ],
    },
    {
      id: 3,
      author: "–û–º–∞—Ä",
      message: "–°—É–±—Ö–∞–Ω –ê–ª–ª–∞—Ö! –≠—Ç–æ—Ç —Å–∞–π—Ç –æ—á–µ–Ω—å –ø–æ–º–æ–≥ –º–Ω–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ö–æ—Ä–∞–Ω–∞. –î–∂–∞–∑–∞–∫—É–º –ê–ª–ª–∞—Ö—É —Ö–∞–π—Ä–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!",
      timestamp: "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥",
      likes: 12,
      replies: [],
    },
  ])

  const [newDiscussion, setNewDiscussion] = useState({
    author: "",
    email: "",
    message: "",
  })

  const [replyForms, setReplyForms] = useState<{ [key: number]: { author: string; message: string } }>({})
  const [showReplyForm, setShowReplyForm] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleSubmitDiscussion = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      const TELEGRAM_BOT_TOKEN = "8119557550:AAGtFP8qkxh0GKO5snVT_Yx9U1wZhYyBr-o"
      const TELEGRAM_CHAT_ID = "1325172996"

      const message = `
üó£Ô∏è –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏:

üë§ –ê–≤—Ç–æ—Ä: ${newDiscussion.author}
üìß Email: ${newDiscussion.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}
‚ùì –°–æ–æ–±—â–µ–Ω–∏–µ: ${newDiscussion.message}

üåê –†–∞–∑–¥–µ–ª: –û–±—Å—É–∂–¥–µ–Ω–∏–µ
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}

#–æ–±—Å—É–∂–¥–µ–Ω–∏–µ #–≤–æ–ø—Ä–æ—Å #–∫–æ—Ä–∞–Ω
      `

      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
        }),
      })

      // –î–æ–±–∞–≤–∏—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const discussion: Discussion = {
        id: Date.now(),
        author: newDiscussion.author,
        message: newDiscussion.message,
        timestamp: "–¢–æ–ª—å–∫–æ —á—Ç–æ",
        likes: 0,
        replies: [],
      }

      setDiscussions((prev) => [discussion, ...prev])
      setNewDiscussion({ author: "", email: "", message: "" })
      alert(t("questionPosted"))
    } catch (error) {
      alert(t("questionError"))
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleSubmitReply = async (discussionId: number) => {
    const replyData = replyForms[discussionId]
    if (!replyData?.author || !replyData?.message) return

    try {
      const TELEGRAM_BOT_TOKEN = "8119557550:AAGtFP8qkxh0GKO5snVT_Yx9U1wZhYyBr-o"
      const TELEGRAM_CHAT_ID = "1325172996"

      const originalDiscussion = discussions.find((d) => d.id === discussionId)
      const message = `
üí¨ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏:

üë§ –ê–≤—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∞: ${replyData.author}
üí≠ –û—Ç–≤–µ—Ç: ${replyData.message}

üìù –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${originalDiscussion?.message.substring(0, 100)}..."
üë§ –ê–≤—Ç–æ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${originalDiscussion?.author}

#–æ—Ç–≤–µ—Ç #–æ–±—Å—É–∂–¥–µ–Ω–∏–µ
      `

      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
        }),
      })

      // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const newReply: ReplyType = {
        id: Date.now(),
        author: replyData.author,
        message: replyData.message,
        timestamp: "–¢–æ–ª—å–∫–æ —á—Ç–æ",
      }

      setDiscussions((prev) =>
        prev.map((discussion) =>
          discussion.id === discussionId ? { ...discussion, replies: [...discussion.replies, newReply] } : discussion,
        ),
      )

      setReplyForms((prev) => ({ ...prev, [discussionId]: { author: "", message: "" } }))
      setShowReplyForm(null)
      alert("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
    }
  }

  const handleLike = (discussionId: number) => {
    setDiscussions((prev) =>
      prev.map((discussion) =>
        discussion.id === discussionId ? { ...discussion, likes: discussion.likes + 1 } : discussion,
      ),
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-gray-900 dark:to-gray-800 p-4">
      <div className="max-w-4xl mx-auto">
        <Card className="mb-8 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm">
          <CardContent className="p-8">
            <div className="text-center mb-8">
              <MessageCircle className="h-16 w-16 text-emerald-600 mx-auto mb-4" />
              <h1 className="text-4xl font-bold text-emerald-800 dark:text-emerald-300 mb-4">{t("discussionTitle")}</h1>
              <p className="text-gray-600 dark:text-gray-400 text-lg">{t("discussionDescription")}</p>
            </div>

            {/* New Discussion Form */}
            <Card className="mb-8 bg-emerald-50 dark:bg-emerald-900/20">
              <CardContent className="p-6">
                <h3 className="text-xl font-semibold text-emerald-800 dark:text-emerald-300 mb-4">
                  –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                </h3>
                <form onSubmit={handleSubmitDiscussion} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Input
                      required
                      value={newDiscussion.author}
                      onChange={(e) => setNewDiscussion({ ...newDiscussion, author: e.target.value })}
                      placeholder={t("yourName")}
                    />
                    <Input
                      type="email"
                      value={newDiscussion.email}
                      onChange={(e) => setNewDiscussion({ ...newDiscussion, email: e.target.value })}
                      placeholder={t("emailOptional")}
                    />
                  </div>

                  <Textarea
                    required
                    rows={4}
                    value={newDiscussion.message}
                    onChange={(e) => setNewDiscussion({ ...newDiscussion, message: e.target.value })}
                    placeholder={t("askQuestion")}
                  />

                  <Button type="submit" disabled={isSubmitting} className="w-full bg-emerald-600 hover:bg-emerald-700">
                    <Send className="h-4 w-4 mr-2" />
                    {isSubmitting ? t("posting") : t("postQuestion")}
                  </Button>
                </form>
              </CardContent>
            </Card>

            {/* Discussions List */}
            <div className="space-y-6">
              {discussions.map((discussion) => (
                <Card key={discussion.id} className="bg-white dark:bg-gray-700">
                  <CardContent className="p-6">
                    <div className="flex items-start space-x-4">
                      <div className="w-10 h-10 bg-emerald-600 rounded-full flex items-center justify-center text-white font-bold">
                        {discussion.author.charAt(0).toUpperCase()}
                      </div>

                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="font-semibold text-gray-800 dark:text-gray-200">{discussion.author}</span>
                          <span className="text-sm text-gray-500 dark:text-gray-400">{discussion.timestamp}</span>
                        </div>

                        <p className="text-gray-700 dark:text-gray-300 mb-4 leading-relaxed">{discussion.message}</p>

                        <div className="flex items-center space-x-4 mb-4">
                          <Button
                            onClick={() => handleLike(discussion.id)}
                            variant="ghost"
                            size="sm"
                            className="text-gray-500 hover:text-red-500"
                          >
                            <Heart className="h-4 w-4 mr-1" />
                            {discussion.likes}
                          </Button>

                          <Button
                            onClick={() => setShowReplyForm(showReplyForm === discussion.id ? null : discussion.id)}
                            variant="ghost"
                            size="sm"
                            className="text-emerald-600 hover:text-emerald-700"
                          >
                            <Reply className="h-4 w-4 mr-1" />
                            {t("reply")}
                          </Button>
                        </div>

                        {/* Replies */}
                        {discussion.replies.length > 0 && (
                          <div className="ml-6 space-y-3 border-l-2 border-emerald-200 dark:border-emerald-700 pl-4">
                            {discussion.replies.map((reply) => (
                              <div key={reply.id} className="bg-gray-50 dark:bg-gray-600 rounded-lg p-4">
                                <div className="flex items-center space-x-2 mb-2">
                                  <span className="font-medium text-emerald-600 dark:text-emerald-400">
                                    {reply.author}
                                  </span>
                                  <span className="text-xs text-gray-500 dark:text-gray-400">{reply.timestamp}</span>
                                </div>
                                <p className="text-gray-700 dark:text-gray-300">{reply.message}</p>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Reply Form */}
                        {showReplyForm === discussion.id && (
                          <div className="mt-4 ml-6 border-l-2 border-emerald-200 dark:border-emerald-700 pl-4">
                            <div className="space-y-3">
                              <Input
                                placeholder="–í–∞—à–µ –∏–º—è"
                                value={replyForms[discussion.id]?.author || ""}
                                onChange={(e) =>
                                  setReplyForms((prev) => ({
                                    ...prev,
                                    [discussion.id]: { ...prev[discussion.id], author: e.target.value },
                                  }))
                                }
                              />
                              <Textarea
                                placeholder="–í–∞—à –æ—Ç–≤–µ—Ç..."
                                rows={3}
                                value={replyForms[discussion.id]?.message || ""}
                                onChange={(e) =>
                                  setReplyForms((prev) => ({
                                    ...prev,
                                    [discussion.id]: { ...prev[discussion.id], message: e.target.value },
                                  }))
                                }
                              />
                              <div className="flex space-x-2">
                                <Button
                                  onClick={() => handleSubmitReply(discussion.id)}
                                  size="sm"
                                  className="bg-emerald-600 hover:bg-emerald-700"
                                >
                                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                                </Button>
                                <Button onClick={() => setShowReplyForm(null)} variant="outline" size="sm">
                                  –û—Ç–º–µ–Ω–∞
                                </Button>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
